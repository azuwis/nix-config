#!/usr/bin/env bash

set -e

CONFIG=$(readlink -f "${BASH_SOURCE[0]}")
CONFIG=${CONFIG%/*/*}

if [ -z "$OS" ]; then
  case "$(uname -s)" in
  Darwin)
    OS=darwin
    ;;
  Linux)
    if [ -d /system/app/ ] && [ -d /system/priv-app ]; then
      OS=droid
    else
      OS=nixos
    fi
    ;;
  *)
    exit 1
    ;;
  esac
fi

usage() {
  local cmd
  cmd=$(basename "$0")
  cat <<EOF
USAGE:
  $cmd b|build [<host>]
  $cmd c|clean
  $cmd d|diff [<host>]
  $cmd hw|hardware
  $cmd l|list
  $cmd s|switch
  $cmd u|update|nu|npins-update [-a] [<input>] [<commit>]
  $cmd fu|flake-update [-a] [<input>] [<commit>]
  $cmd dg|direnv-gcroots
  $cmd [--] <darwin-rebuild/nix-on-droid/nixos-rebuild args>
  $cmd dry <command> ...
EOF
}

echoerr() {
  >&2 echo "$@"
}

run() {
  full_command=("$@")
  command=$1
  case "$command" in
  nom) package="nix-output-monitor" ;;
  nix-diff | nvd) package="$command" ;;
  esac
  if [ -n "$package" ] && ! command -v "$command" &>/dev/null; then
    shift
    full_command=(nix run nixpkgs#"$package" -- "$@")
  fi
  >&2 printf '\033[0;33m$ '
  >&2 printf '%q ' "${full_command[@]}"
  >&2 printf '\033[0m\n'
  if [ "$DRY_RUN" = true ]; then
    echoerr "Dry run, exit"
    exit 1
  else
    "${full_command[@]}"
  fi
}

input() {
  output=$(nix-instantiate --eval --expr "(import $CONFIG/inputs).$1.outPath")
  output=${output#\"}
  output=${output%\"}
  echo "$output"
}

build() {
  local args diff hostname nix profile

  # nix=(nom-build)
  # https://github.com/NixOS/nix/blob/07204ff6e546c95e3b95af90078b0082cb1449fc/src/libmain/progress-bar.cc#L477-L495
  # blue: running, green: done, normal: expected
  nix=(nix-build --log-format bar-with-logs)
  if [ "$1" = "--ci" ]; then
    nix=(nix-build)
    shift
  fi

  if [ "$1" = "--diff" ]; then
    diff=yes
    shift
  fi

  if [ -n "$1" ]; then
    hostname="$1"
    profile="$HOME/.local/state/nix/profiles/$hostname"
    SYSTEM=$(readlink -f "$profile" || true)
    shift
  else
    hostname="$(hostname)"
    case "$OS" in
    darwin) SYSTEM=$(readlink -f /run/current-system || true) ;;
    droid)
      SYSTEM=$(readlink -f /nix/var/nix/profiles/nix-on-droid || true)
      hostname=default
      ;;
    nixos) SYSTEM=$(readlink -f /run/current-system || true) ;;
    esac
  fi

  case "$OS" in
  darwin) args=("darwinConfigurations.\"$hostname\".system") ;;
  droid) args=("nixOnDroidConfigurations.\"$hostname\".activationPackage") ;;
  nixos) args=("nixosConfigurations.\"$hostname\".config.system.build.toplevel") ;;
  esac

  BUILT=$(run "${nix[@]}" "$CONFIG" --no-out-link --attr "${args[@]}" "$@")

  if [ -n "$profile" ]; then
    nix-env --profile "$profile" --set "$BUILT"
  fi

  if [ -e "$SYSTEM" ]; then
    if [ "$SYSTEM" = "$BUILT" ]; then
      echoerr "build-result == current-system"
    else
      run nvd diff "$SYSTEM" "$BUILT"

      if [ "$diff" = yes ]; then
        run nix-diff --character-oriented "$SYSTEM" "$BUILT"
      fi
    fi
  fi
}

clean() {
  # Clean up gcroots symlinks
  shopt -s nullglob
  for i in "/nix/var/nix/gcroots/per-user/$USER/"*; do
    if [ ! -e "$i" ]; then
      rm -v "$i"
    fi
  done
}

darwin_switch() {
  # https://github.com/LnL7/nix-darwin/blob/bb81755a3674951724d79b8cba6bbff01409d44d/pkgs/nix-tools/darwin-rebuild.sh#L213
  run sudo -H nix-env --profile /nix/var/nix/profiles/system --set "$BUILT"
  # https://github.com/LnL7/nix-darwin/blob/bb81755a3674951724d79b8cba6bbff01409d44d/pkgs/nix-tools/darwin-rebuild.sh#L221
  run "$BUILT/activate-user"
  run sudo "$BUILT/activate"
}

droid_switch() {
  # https://github.com/nix-community/nix-on-droid/blob/5d88ff2519e4952f8d22472b52c531bb5f1635fc/nix-on-droid/nix-on-droid.sh#L95
  run "$BUILT/activate"
}

nixos_switch() {
  # https://github.com/NixOS/nixpkgs/blob/dad0bf139b2db8d258deb21424454db24285d531/pkgs/os-specific/linux/nixos-rebuild/nixos-rebuild.sh#L806
  run sudo nix-env --profile /nix/var/nix/profiles/system --set "$BUILT"
  # https://github.com/NixOS/nixpkgs/blob/dad0bf139b2db8d258deb21424454db24285d531/pkgs/os-specific/linux/nixos-rebuild/nixos-rebuild.sh#L896
  cmd=(
    "systemd-run"
    "-E" "LOCALE_ARCHIVE" # Will be set to new value early in switch-to-configuration script, but interpreter starts out with old value
    "--collect"
    "--no-ask-password"
    "--pipe"
    "--quiet"
    "--service-type=exec"
    "--unit=nixos-rebuild-switch-to-configuration"
    "--wait"
  )
  run sudo "${cmd[@]}" "$BUILT/bin/switch-to-configuration" "$@"
}

hardware() {
  test -e /etc/NIXOS || exit
  run sudo nixos-generate-config --show-hardware-config | grep -Ev 'networking.interfaces.macvtap|networking.interfaces.virbr' >"$CONFIG/hosts/hardware-$(hostname).nix"
}

rebuild() {
  local cmd
  case "$OS" in
  darwin)
    cmd=(darwin-rebuild --no-flake -I nixpkgs="$(input nixpkgs)" -I darwin="$(input nix-darwin)" -I darwin-config="$CONFIG/hosts/$(hostname).nix")
    ;;
  droid)
    cmd=(nix-on-droid -I nixpkgs="$(input nixpkgs)" -I nix-on-droid="$(input nix-on-droid)" -I home-manager="$(input home-manager)" --file "$CONFIG/droid")
    ;;
  nixos)
    cmd=(nixos-rebuild --no-flake --fast --use-remote-sudo --file "$CONFIG" --attr nixosConfigurations."$(hostname)")
    ;;
  esac
  run "${cmd[@]}" "$@"
}

flake-update() {
  if [ -e flake.nix ]; then
    CONFIG=.
  fi
  local args
  args=()
  if [ -n "$1" ]; then
    input="$1"
    if [ "$input" = "-a" ]; then
      shift
      if [ -n "$1" ]; then
        input="$1"
        shift
      fi
    else
      args=("$input")
      shift
    fi
  fi
  if [ -n "$1" ]; then
    url=$(nix eval --raw --file "$CONFIG/flake.nix" "inputs.$input.url")
    slash=${url//[^\/]/}
    if [ "${#slash}" = 1 ]; then
      url="$url/$1"
    elif [ "${#slash}" = 2 ]; then
      url=${url%/*}
      url="$url/$1"
    else
      url="$1"
    fi
    args+=(--override-input "$input" "$url")
    shift
  fi
  run nix flake update --flake "$CONFIG" "${args[@]}" "$@"
}

npins-update() {
  local args
  args=(update)
  if [ -n "$1" ]; then
    input="$1"
    shift
    if [ "$input" = "-a" ]; then
      update_all=true
      input="$1"
      shift
    fi
    if [ -n "$1" ]; then
      hash="$1"
      {
        read -r type
        read -r owner
        read -r repo
        read -r branch
        read -r submodules
      } < <(jq -r ".pins.${input} | (.repository.type | ascii_downcase), .repository.owner, .repository.repo, .branch, .submodules" inputs/sources.json)
      args=(add --name "$input" "$type" --branch "$branch" --at "$hash" "$owner" "$repo")
      if [ "$submodules" = true ]; then
        args+=(--submodules)
      fi
      if [ "$update_all" = true ]; then
        mapfile -t inputs < <(jq -r '.pins | to_entries | map(select(.key!="'"$input"'")).[].key' inputs/sources.json)
        run npins update "${inputs[@]}"
      fi
    else
      args+=("$input")
    fi
  fi
  run npins "${args[@]}"
}

# See all nix-direnv gcroots
direnv-gcroots() {
  nix-store --gc --print-roots | awk '/flake-profile/ {print $1}' | xargs -o nix-tree
}

if [ "$1" = dry ]; then
  DRY_RUN=true
  shift
fi

ask=no
action="$1"
if [ -n "$action" ]; then
  shift
else
  action="switch"
  ask=yes
fi

case "$action" in
b) action="build" ;;
c) action="clean" ;;
d) action="diff" ;;
dg) action="direnv-gcroots" ;;
fu) action="flake-update" ;;
h | -h) action="help" ;;
hw) action="hardware" ;;
l) action="list" ;;
nu | u | update) action="npins-update" ;;
s) action="switch" ;;
esac

case "$action" in
build | clean | hardware | flake-update | npins-update | direnv-gcroots)
  "$action" "$@"
  ;;
ci)
  if [ "$1" = droid ]; then
    proot=$(nix-instantiate --eval "$CONFIG" --attr nixOnDroidConfigurations.droid.config.environment.files.prootStatic.outPath)
    proot=${proot#\"}
    proot=${proot%\"}
    nix-store --realise --option substituters https://nix-on-droid.cachix.org \
      --option trusted-public-keys "nix-on-droid.cachix.org-1:56snoMJTXmDRC1Ei24CmKoUqvHJ9XCp+nidK7qkMQrU=" \
      "$proot"
    OS=droid
  fi
  NPINS_OVERRIDE_my="$CONFIG/test" build --ci "$@"
  ;;
diff)
  build --diff "$@"
  ;;
help)
  usage
  ;;
list)
  case "$OS" in
  darwin)
    action=--list-generations
    ;;
  droid)
    action=generations
    ;;
  nixos)
    action=list-generations
    ;;
  esac
  rebuild "$action" "$@"
  ;;
switch)
  build
  if [ "$ask" = yes ]; then
    if [ "$SYSTEM" = "$BUILT" ]; then
      echoerr "Skip switch"
      exit
    fi
    read -p "Switch? [Yn]" -r answer
    if [ -n "$answer" ] && [ "$answer" != "Y" ]; then
      exit 1
    fi
  fi
  if [ "$(type -t "${OS}_switch")" = function ]; then
    "${OS}_switch" "$action"
  else
    rebuild "$action" "$@"
  fi
  ;;
--)
  rebuild "$@"
  ;;
*)
  rebuild "$action" "$@"
  ;;
esac

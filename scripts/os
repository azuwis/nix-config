#!/usr/bin/env bash

set -e

FLAKE=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")/..")

case "$(uname -s)" in
  Darwin)
    OS=darwin
    ;;
  Linux)
    if [ -d /system/app/ ] && [ -d /system/priv-app ]
    then
      OS=droid
    else
      OS=nixos
    fi
    ;;
  *)
    exit 1
    ;;
esac

help() {
  local cmd
  cmd=$(basename "$0")
  cat <<EOF
USAGE:
$cmd b|build [<host>]
$cmd d|diff [<host>]
$cmd s|switch
$cmd u|update [<input>] [<commit>]
$cmd <darwin-rebuild/nix-on-droid/nixos-rebuild args>
EOF
}

build() {
  local args diff hostname nix profile system

  nix=(nix run nixpkgs#nix-output-monitor --)
  if [ "$1" = "--no-nom" ]
  then
    nix=(nix --print-build-logs)
    shift
  fi

  if [ "$1" = "--diff" ]
  then
    diff=yes
    shift
  fi

  if [ -n "$1" ]
  then
    hostname="$1"
    mkdir -p "$FLAKE/gcroots"
    profile="$FLAKE/gcroots/$hostname"
    args=(--profile "$profile")
    system=$(readlink -f "$profile" || true)
    shift
  else
    hostname="$(hostname)"
  fi

  case "$OS" in
    darwin)
      args+=("$FLAKE#darwinConfigurations.\"$hostname\".system")
      system=${system:-/run/current-system}
      ;;
    droid)
      args+=(--impure "$FLAKE#nixOnDroidConfigurations.default.activationPackage")
      system=${system:-/nix/var/nix/profiles/nix-on-droid}
      ;;
    nixos)
      args+=("$FLAKE#nixosConfigurations.\"$hostname\".config.system.build.toplevel")
      system=${system:-/run/current-system}
      ;;
  esac

  BUILT=$("${nix[@]}" build --no-link --print-out-paths "${args[@]}" "$@")

  if [ "$BUILT" = "$(readlink -f "$system" || true)" ]
  then
    echo "build-result == current-system"
    exit
  fi

  nix run nixpkgs#nvd -- diff "$system" "$BUILT"

  if [ "$diff" = yes ]
  then
    nix run nixpkgs#nix-diff -- --character-oriented "$system" "$BUILT"
  fi
}

droid_switch() {
  # It seems nix eval cache does not work on nix-on-droid,
  # directly call activate script to avoid eval again
  "$BUILT/activate"
}

rebuild() {
  local cmd
  case "$OS" in
    darwin)
      cmd=(darwin-rebuild --flake "$FLAKE")
      ;;
    droid)
      cmd=(nix-on-droid --flake "$FLAKE")
      ;;
    nixos)
      cmd=(nixos-rebuild --flake "$FLAKE" --fast --use-remote-sudo)
      ;;
  esac
  "${cmd[@]}" "$@"
}

update() {
  pushd "$FLAKE"
  local args
  args=(--recreate-lock-file)
  if [ -n "$1" ]
  then
    input="$1"
    args=(--update-input "$input")
    shift
  fi
  if [ -n "$1" ]
  then
    url=$(nix eval --raw --file flake.nix "inputs.$input.url")
    slash=${url//[^\/]}
    if [ "${#slash}" = 1 ]
    then
      url="$url/$1"
    elif [ "${#slash}" = 2 ]
    then
      url=${url%/*}
      url="$url/$1"
    else
      url="$1"
    fi
    args+=(--override-input "$input" "$url")
    shift
  fi
  nix flake lock "${args[@]}" "$@"
  popd
}

ask=no
action="$1"
if [ -n "$action" ]
then
  shift
else
  action="switch"
  ask=yes
fi
case "$action" in
  b|build)
    build "$@"
    ;;
  ci)
    build --no-nom "$@" --override-input my "path:$FLAKE/test"
    ;;
  d|diff)
    build --diff "$@"
    ;;
  l|list)
    case "$OS" in
      darwin)
        action=--list-generations
        ;;
      droid)
        action=generations
        ;;
      nixos)
        action=list-generations
        ;;
    esac
    rebuild "$action" "$@"
    ;;
  h|help)
    help
    ;;
  s|switch)
    build
    if [ "$ask" = yes ]
    then
      read -p "Switch? [Yn]" -r answer
      if [ -n "$answer" ] && [ "$answer" != "Y" ]
      then
        exit 1
      fi
    fi
    if [ "$OS" = droid ]
    then
      droid_switch
    else
      action="switch"
      rebuild "$action" "$@"
    fi
    ;;
  u|update)
    update "$@"
    ;;
  *)
    rebuild "$action" "$@"
esac

#!/usr/bin/env bash

set -e

usage() {
  local cmd
  cmd=$(basename "$0")
  cat <<EOF
USAGE:
  $cmd b|build [<nix-build args>] [<host>]
  $cmd c|clean
  $cmd d|diff [<host>]
  $cmd dp|deploy [<host>]
  $cmd hw|hardware
  $cmd l|list
  $cmd r|run <apps>
  $cmd s|switch [<host>]
  $cmd u|update|nu|npins-update [-a] [<input>] [<commit>]
  $cmd fu|flake-update [-a] [<input>] [<commit>]
  $cmd dg|direnv-gcroots
  $cmd [--] <darwin-rebuild/nix-on-droid/nixos-rebuild args>
  $cmd dry <command> ...
EOF
}

echoerr() {
  >&2 echo "$@"
}

run() {
  command="$1"
  shift
  if [ "$(nix-instantiate --argstr apps "$CONFIG/apps" --argstr command "$command" --eval --expr \
    '{ apps, command }: if builtins.hasAttr command (import apps { }) then true else false')" = true ]; then
    nix --extra-experimental-features nix-command run --file "$CONFIG/apps" "$command" -- "$@"
  else
    nix --extra-experimental-features nix-command run --file "$CONFIG/pkgs" "$command" -- "$@"
  fi
}

run_command() {
  full_command=("$@")
  command=$1
  case "$command" in
  nom) package="nix-output-monitor" ;;
  nix-diff | nvd) package="$command" ;;
  esac
  if [ -n "$package" ] && ! command -v "$command" &>/dev/null; then
    shift
    full_command=(nix --extra-experimental-features nix-command run --file "$CONFIG/pkgs" "$package" -- "$@")
  fi
  >&2 printf '\033[0;33m$ '
  >&2 printf '%q ' "${full_command[@]}"
  >&2 printf '\033[0m\n'
  if [ "$DRY_RUN" = true ]; then
    echoerr "Dry run, exit"
    exit 1
  else
    "${full_command[@]}"
  fi
}

input() {
  output=$(nix-instantiate --eval --expr "(import $CONFIG/inputs).$1.outPath")
  output=${output#\"}
  output=${output%\"}
  echo "$output"
}

build() {
  local args nix profile

  # nix=(nom-build)
  # https://github.com/NixOS/nix/blob/07204ff6e546c95e3b95af90078b0082cb1449fc/src/libmain/progress-bar.cc#L477-L495
  # blue: running, green: done, normal: expected
  nix=(nix-build --log-format bar-with-logs)

  if [ "$FOROTHER" = true ]; then
    profile="$HOME/.local/state/nix/profiles/$HOSTNAME"
    SYSTEM=$(readlink -f "$profile" || true)

    if [ "$OS" = droid ]; then
      proot=$(nix-instantiate --eval "$CONFIG/flakes" --attr "nixOnDroidConfigurations.\"$HOSTNAME\".config.environment.files.prootStatic.outPath")
      proot=${proot#\"}
      proot=${proot%\"}
      nix-store --realise --option substituters https://nix-on-droid.cachix.org \
        --option trusted-public-keys "nix-on-droid.cachix.org-1:56snoMJTXmDRC1Ei24CmKoUqvHJ9XCp+nidK7qkMQrU=" \
        "$proot"
    fi
  else
    case "$OS" in
    darwin) SYSTEM=$(readlink -f /run/current-system || true) ;;
    droid) SYSTEM=$(readlink -f /nix/var/nix/profiles/nix-on-droid || true) ;;
    nixos) SYSTEM=$(readlink -f /run/current-system || true) ;;
    solo) SYSTEM=$(readlink -f ~/.nix-profile || true) ;;
    esac
  fi

  case "$OS" in
  darwin) args=("darwinConfigurations.\"$HOSTNAME\".system") ;;
  droid) args=("nixOnDroidConfigurations.\"$HOSTNAME\".activationPackage") ;;
  nixos) args=("nixosConfigurations.\"$HOSTNAME\".config.system.build.toplevel") ;;
  solo) args=("soloConfigurations.\"$HOSTNAME\".config.environment.path") ;;
  esac

  if [ "$CI" = true ]; then
    export NPINS_OVERRIDE_my="$CONFIG/test"
    nix=(nix-build)
  fi

  BUILT=$(run_command "${nix[@]}" "$CONFIG/flakes" --no-out-link --attr "${args[@]}" "$@")

  if [ -z "$BUILT" ]; then
    exit
  fi

  if [ -n "$profile" ]; then
    nix-env --profile "$profile" --set "$BUILT"
  fi

  if [ -e "$SYSTEM" ]; then
    if [ "$SYSTEM" = "$BUILT" ]; then
      echoerr "build-result == current-system"
    else
      run_command nvd diff "$SYSTEM" "$BUILT"

      if [ "$DIFF" = true ]; then
        run_command nix-diff --character-oriented "$SYSTEM" "$BUILT"
      fi
    fi
  fi

  if [ "$SWITCH" = true ]; then
    if [ "$ASK" = true ]; then
      if [ "$SYSTEM" = "$BUILT" ]; then
        echoerr "Skip switch"
        exit
      fi
      read -p "Switch? [Yn]" -r answer
      if [ -n "$answer" ] && [ "$answer" != "Y" ]; then
        exit 1
      fi
    fi
    if [ "$(type -t "${OS}_switch")" = function ]; then
      "${OS}_switch" switch
    else
      rebuild switch "$@"
    fi
  fi
}

clean() {
  # Clean up gcroots symlinks
  shopt -s nullglob
  for i in "/nix/var/nix/gcroots/per-user/$USER/"*; do
    if [ ! -e "$i" ]; then
      rm -v "$i"
    fi
  done
}

darwin_switch() {
  # https://github.com/nix-darwin/nix-darwin/blob/b9b927dd1f24094b271e8ec5277a672dc4fc860d/pkgs/nix-tools/darwin-rebuild.sh#L236
  # Need `--set-home` or warning: $HOME ('/Users/azuwis') is not owned by you, falling back to the one defined in the 'passwd' file ('/var/root')
  run_command sudo --set-home nix-env --profile /nix/var/nix/profiles/system --set "$BUILT"
  run_command sudo "$BUILT/activate"
}

droid_switch() {
  # https://github.com/nix-community/nix-on-droid/blob/5d88ff2519e4952f8d22472b52c531bb5f1635fc/nix-on-droid/nix-on-droid.sh#L95
  run_command "$BUILT/activate"
}

nixos_switch() {
  # https://github.com/NixOS/nixpkgs/blob/dad0bf139b2db8d258deb21424454db24285d531/pkgs/os-specific/linux/nixos-rebuild/nixos-rebuild.sh#L806
  run_command sudo nix-env --profile /nix/var/nix/profiles/system --set "$BUILT"
  # https://github.com/NixOS/nixpkgs/blob/dad0bf139b2db8d258deb21424454db24285d531/pkgs/os-specific/linux/nixos-rebuild/nixos-rebuild.sh#L896
  cmd=(
    "systemd-run"
    "-E" "LOCALE_ARCHIVE" # Will be set to new value early in switch-to-configuration script, but interpreter starts out with old value
    "--collect"
    "--no-ask-password"
    "--pipe"
    "--quiet"
    "--service-type=exec"
    "--unit=nixos-rebuild-switch-to-configuration"
    "--wait"
  )
  run_command sudo "${cmd[@]}" "$BUILT/bin/switch-to-configuration" "$@"
}

solo_switch() {
  run_command nix-env --set "$BUILT"
  activate=$(nix-build "$CONFIG/flakes" --no-out-link --attr "soloConfigurations.\"$HOSTNAME\".config.home.activate")
  if [ -n "$activate" ]; then
    run_command "$activate" "$HOME"
  fi
}

hardware() {
  test -e /etc/NIXOS || exit
  run_command sudo nixos-generate-config --show-hardware-config | grep -Ev 'networking.interfaces.macvtap|networking.interfaces.virbr' >"$CONFIG/hosts/hardware-$(hostname).nix"
}

rebuild() {
  local cmd
  case "$OS" in
  darwin)
    cmd=(darwin-rebuild --no-flake -I nixpkgs="$(input nixpkgs)" -I darwin="$(input nix-darwin)" -I darwin-config="$CONFIG/hosts/$HOSTNAME.nix")
    ;;
  droid)
    cmd=(nix-on-droid -I nixpkgs="$(input nixpkgs)" -I nix-on-droid="$(input nix-on-droid)" --file "$CONFIG/droid")
    ;;
  nixos)
    cmd=(nixos-rebuild --no-flake --fast --use-remote-sudo --file "$CONFIG/flakes" --attr "nixosConfigurations.\"$HOSTNAME\"")
    ;;
  esac
  run_command "${cmd[@]}" "$@"
}

flake-update() {
  if [ -e flake.nix ]; then
    CONFIG=.
  fi
  local args
  args=()
  if [ -n "$1" ]; then
    input="$1"
    if [ "$input" = "-a" ]; then
      shift
      if [ -n "$1" ]; then
        input="$1"
        shift
      fi
    else
      args=("$input")
      shift
    fi
  fi
  if [ -n "$1" ]; then
    url=$(nix --extra-experimental-features "flakes nix-command" eval --raw --file "$CONFIG/flake.nix" "inputs.$input.url")
    slash=${url//[^\/]/}
    if [ "${#slash}" = 1 ]; then
      url="$url/$1"
    elif [ "${#slash}" = 2 ]; then
      url=${url%/*}
      url="$url/$1"
    else
      url="$1"
    fi
    args+=(--override-input "$input" "$url")
    shift
  fi
  run_command nix --extra-experimental-features "flakes nix-command" flake update --flake "$CONFIG" "${args[@]}" "$@"
}

npins-update() {
  local args
  args=(update)
  if [ -n "$1" ]; then
    input="$1"
    shift
    if [ "$input" = "-a" ]; then
      update_all=true
      input="$1"
      shift
    fi
    if [ -n "$1" ]; then
      hash="$1"
      {
        read -r type
        read -r owner
        read -r repo
        read -r branch
        read -r submodules
      } < <(jq -r ".pins.\"${input}\" | (.repository.type | ascii_downcase), .repository.owner, .repository.repo, .branch, .submodules" inputs/sources.json)
      args=(add --name "$input" "$type" --branch "$branch" --at "$hash" "$owner" "$repo")
      if [ "$submodules" = true ]; then
        args+=(--submodules)
      fi
      if [ "$update_all" = true ]; then
        mapfile -t inputs < <(jq -r '.pins | to_entries | map(select(.key!="'"$input"'")).[].key' inputs/sources.json)
        run_command npins update "${inputs[@]}"
      fi
    else
      args+=("$input")
    fi
  fi
  run_command npins "${args[@]}"
}

# See all nix-direnv gcroots
direnv-gcroots() {
  nix-store --gc --print-roots | awk '/flake-profile/ {print $1}' | xargs -o nix-tree
}

# Variables for all
CONFIG=$(readlink -f "${BASH_SOURCE[0]}")
CONFIG=${CONFIG%/*/*}

if [ "$1" = dry ]; then
  DRY_RUN=true
  shift
fi

action="$1"
if [ -n "$action" ]; then
  shift
else
  ASK=true
  SWITCH=true
  action="build"
fi

case "$action" in
b) action="build" ;;
c) action="clean" ;;
ci)
  CI=true
  action="build"
  ;;
dp | deploy) action="deploy" ;;
d | diff)
  DIFF=true
  action="build"
  ;;
dg) action="direnv-gcroots" ;;
fu) action="flake-update" ;;
h | -h) action="usage" ;;
hw) action="hardware" ;;
l) action="list" ;;
nu | u | update) action="npins-update" ;;
r | run) action="run" ;;
s | switch)
  SWITCH=true
  action="build"
  ;;
esac

case "$action" in
clean | direnv-gcroots | flake-update | hardware | npins-update | run | usage)
  "$action" "$@"
  exit $?
  ;;
esac

# Variables for build
if { [ "$action" = build ] || [ "$action" = deploy ]; } && [ "$#" -gt 0 ] && [[ ${*: -1} != -* ]]; then
  HOSTNAME="${*: -1}"
  FOROTHER=true
  # remove last arg
  set -- "${@:1:$#-1}"
elif [ -d /system/app/ ] && [ -d /system/priv-app ]; then
  # nix-on-droid can not set hostname, so detect and hardcode here
  # https://github.com/nix-community/nix-on-droid/issues/51
  HOSTNAME=droid-arm
else
  HOSTNAME=$(hostname)
fi

OS=$(nix-instantiate --argstr hostname "$HOSTNAME" --argstr flakes "$CONFIG/flakes" --eval --expr '
{ flakes, hostname }:
let
  attr = import flakes;
in
if builtins.hasAttr hostname attr.darwinConfigurations then
  "darwin"
else if builtins.hasAttr hostname attr.nixosConfigurations then
  "nixos"
else if builtins.hasAttr hostname attr.nixOnDroidConfigurations then
  "droid"
else
  "solo"
')
OS=${OS#\"}
OS=${OS%\"}

if [ "$OS" = solo ] &&
  [ "$(nix-instantiate --argstr hostname "$HOSTNAME" --argstr flakes "$CONFIG/flakes" --eval --expr '
{ flakes, hostname }:
let
  attr = import flakes;
in
if builtins.hasAttr hostname attr.soloConfigurations then
  true
else
  false
')" = false ]; then
  HOSTNAME=solo
fi

case "$action" in
build)
  "$action" "$@"
  ;;
deploy)
  rebuild switch --target-host "$HOSTNAME" "$@"
  ;;
list)
  case "$OS" in
  darwin)
    action=--list-generations
    ;;
  droid)
    action=generations
    ;;
  nixos)
    action=list-generations
    ;;
  esac
  rebuild "$action" "$@"
  ;;
--)
  rebuild "$@"
  ;;
*)
  rebuild "$action" "$@"
  ;;
esac

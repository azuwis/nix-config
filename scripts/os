#!/usr/bin/env bash

set -e

CONFIG=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")/..")

case "$(uname -s)" in
Darwin)
  OS=darwin
  ;;
Linux)
  if [ -d /system/app/ ] && [ -d /system/priv-app ]; then
    OS=droid
  else
    OS=nixos
  fi
  ;;
*)
  exit 1
  ;;
esac

usage() {
  local cmd
  cmd=$(basename "$0")
  cat <<EOF
USAGE:
  $cmd b|build [<host>]
  $cmd c|clean
  $cmd d|diff [<host>]
  $cmd hw|hardware
  $cmd l|list
  $cmd s|switch
  $cmd u|update [-a] [<input>] [<commit>]
  $cmd <darwin-rebuild/nix-on-droid/nixos-rebuild args>
EOF
}

echoerr() {
  >&2 echo "$@"
}

run() {
  full_command=("$@")
  command=$1
  case "$command" in
  nom) package="nix-output-monitor" ;;
  nix-diff | nvd) package="$command" ;;
  esac
  if [ -n "$package" ] && ! command -v "$command" &>/dev/null; then
    shift
    full_command=(nix run nixpkgs#"$package" -- "$@")
  fi
  >&2 printf '\033[0;33m$ '
  >&2 printf '%q ' "${full_command[@]}"
  >&2 printf '\033[0m\n'
  "${full_command[@]}"
}

build() {
  local args diff hostname nix profile

  nix=(nom)
  if [ "$1" = "--no-nom" ]; then
    nix=(nix --print-build-logs)
    shift
  fi

  if [ "$1" = "--diff" ]; then
    diff=yes
    shift
  fi

  if [ -n "$1" ]; then
    hostname="$1"
    profile="$HOME/.local/state/nix/profiles/$hostname"
    args=(--profile "$profile")
    SYSTEM=$(readlink -f "$profile" || true)
    shift
  else
    hostname="$(hostname)"
    case "$OS" in
    darwin) SYSTEM=$(readlink -f /run/current-system || true) ;;
    droid)
      SYSTEM=$(readlink -f /nix/var/nix/profiles/nix-on-droid || true)
      hostname=default
      ;;
    nixos) SYSTEM=$(readlink -f /run/current-system || true) ;;
    esac
  fi

  case "$OS" in
  darwin) args+=("$CONFIG#darwinConfigurations.\"$hostname\".system") ;;
  droid) args+=(--impure "$CONFIG#nixOnDroidConfigurations.\"$hostname\".activationPackage") ;;
  nixos) args+=("$CONFIG#nixosConfigurations.\"$hostname\".config.system.build.toplevel") ;;
  esac

  BUILT=$(run "${nix[@]}" build --no-link --print-out-paths "${args[@]}" "$@")

  if [ -e "$SYSTEM" ]; then
    if [ "$SYSTEM" = "$BUILT" ]; then
      echoerr "build-result == current-system"
    else
      run nvd diff "$SYSTEM" "$BUILT"

      if [ "$diff" = yes ]; then
        run nix-diff --character-oriented "$SYSTEM" "$BUILT"
      fi
    fi
  fi
}

clean() {
  # Clean up gcroots symlinks
  shopt -s nullglob
  for i in "/nix/var/nix/gcroots/per-user/$USER/"*; do
    if [ ! -e "$i" ]; then
      rm -v "$i"
    fi
  done
}

droid_switch() {
  # It seems nix eval cache does not work on nix-on-droid,
  # directly call activate script to avoid eval again
  run "$BUILT/activate"
}

hardware() {
  test -e /etc/NIXOS || exit
  # shellcheck disable=SC2024
  run sudo nixos-generate-config --show-hardware-config | grep -Ev 'networking.interfaces.macvtap|networking.interfaces.virbr' >"$CONFIG/hosts/hardware-$(hostname).nix"
}

rebuild() {
  local cmd
  case "$OS" in
  darwin)
    cmd=(darwin-rebuild --flake "$CONFIG")
    ;;
  droid)
    cmd=(nix-on-droid --flake "$CONFIG")
    ;;
  nixos)
    cmd=(nixos-rebuild --flake "$CONFIG" --fast --use-remote-sudo)
    ;;
  esac
  run "${cmd[@]}" "$@"
}

update() {
  pushd "$CONFIG" >/dev/null
  local args
  args=(update)
  if [ -n "$1" ]; then
    input="$1"
    if [ "$input" = "-a" ]; then
      shift
      if [ -n "$1" ]; then
        input="$1"
        shift
      fi
    else
      if nix --version | grep -qF Lix; then
        args=(update "$input")
      else
        args=(lock --update-input "$input")
      fi
      shift
    fi
  fi
  if [ -n "$1" ]; then
    url=$(nix eval --raw --file flake.nix "inputs.$input.url")
    slash=${url//[^\/]/}
    if [ "${#slash}" = 1 ]; then
      url="$url/$1"
    elif [ "${#slash}" = 2 ]; then
      url=${url%/*}
      url="$url/$1"
    else
      url="$1"
    fi
    args+=(--override-input "$input" "$url")
    shift
  fi
  run nix flake "${args[@]}" "$@"
  popd >/dev/null
}

ask=no
action="$1"
if [ -n "$action" ]; then
  shift
else
  action="switch"
  ask=yes
fi
case "$action" in
b | build)
  build "$@"
  ;;
c | clean)
  clean "$@"
  ;;
ci)
  if [ "$1" = droid ]; then
    nix eval --impure --option extra-substituters https://nix-on-droid.cachix.org \
      --option extra-trusted-public-keys "nix-on-droid.cachix.org-1:56snoMJTXmDRC1Ei24CmKoUqvHJ9XCp+nidK7qkMQrU=" \
      .#nixOnDroidConfigurations.droid.config.environment.files.prootStatic.outPath
    OS=droid
  fi
  NPINS_OVERRIDE_my="$CONFIG/test" build --no-nom "$@" --impure
  ;;
d | diff)
  build --diff "$@"
  ;;
l | list)
  case "$OS" in
  darwin)
    action=--list-generations
    ;;
  droid)
    action=generations
    ;;
  nixos)
    action=list-generations
    ;;
  esac
  rebuild "$action" "$@"
  ;;
hw | hardware)
  hardware
  ;;
h | help)
  usage
  ;;
s | switch)
  build
  if [ "$ask" = yes ]; then
    if [ "$SYSTEM" = "$BUILT" ]; then
      echoerr "Skip switch"
      exit
    fi
    read -p "Switch? [Yn]" -r answer
    if [ -n "$answer" ] && [ "$answer" != "Y" ]; then
      exit 1
    fi
  fi
  if [ "$OS" = droid ]; then
    droid_switch
  else
    action="switch"
    rebuild "$action" "$@"
  fi
  ;;
u | update)
  update "$@"
  ;;
*)
  rebuild "$action" "$@"
  ;;
esac

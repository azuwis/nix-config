#!/usr/bin/env bash

set -e

root=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")/..")

usage() {
  local name
  name=$(basename "$0")
  cat <<EOF
USAGE:
  $name                            Display usage from update.nix
  $name -h                         Display this usage
  $name [options] -p               Prompt before update
  $name [options] -a               Update all packages in $root
  $name [options] <package>        Update package named <package>
  $name [options] -- <args>        Args to update.nix

options:
  -c Commit automatically
  -j Output packages to update in JSON format
  -l List packages to update
  -w <jobs> Number of jobs in parallel
EOF
  exit
}

command=(nix-shell "$root/scripts/update.nix")
while getopts ":aci:jhlpw:-:" opt; do
  case "$opt" in
  a) command+=(--argstr all true) ;;
  c) command+=(--argstr commit true) ;;
  i) info="$OPTARG" ;;
  j)
    command+=(--argstr output-json true)
    drop_stderr=true
    ;;
  l)
    command+=(--argstr list-package true)
    drop_stderr=true
    ;;
  p) command+=(--argstr skip-prompt false) ;;
  w) command+=(--argstr max-workers "$OPTARG") ;;
  -) ;;
  h | *) usage ;;
  esac
done
shift $((OPTIND - 1))

if [ -n "$info" ]; then
  nix eval --raw --apply "f: f { path = \"$info\";}" --file "$root/scripts/info.nix"
  exit
fi

if [ "$#" -eq 1 ]; then
  command+=(--argstr package)
fi

command+=("$@")

if [ "$drop_stderr" = "true" ]; then
  "${command[@]}" 2>/dev/null
else
  pushd "$root" >/dev/null
  >&2 echo "${command[@]}"
  "${command[@]}"
  popd >/dev/null
fi
